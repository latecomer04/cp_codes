using namespace std;

class SGTree{
    vector<int> seg;

public:
    SGTree(int n){
        seg.resize(n*4+1);
    }
    
    void build(int ind,int low,int high,int arr[]){
        if(low==high){
            seg[ind]=arr[low];
            return;
        }
        int mid=low+(high-low)/2;
        build(ind*2+1,low,mid,arr);
        build(2*ind+2,mid+1,high,arr);
        
        seg[ind]=min(seg[2*ind+1],seg[2*ind+2]);
    }
    
    int query(int ind,int low,int high,int l,int r){
        
        //no overlapping => l r low high or low high l r
        if(r<low || high<l){
            return INT_MAX;
        }
        
        //complete overlapping => l low high r
        if(low >=l&& r>=high){
            return seg[ind];
        }
        
        int mid=low+(high-low)/2;
        int left=query(2*ind+1,low,mid,l,r);
        int right=query(2*ind+2,mid+1,high,l,r);
        
        return min(left,right);
    }
    
    void update(int ind,int low,int high,int i,int val){
        
        if(low==high){
            seg[ind]=val;
            return ;
        }
        
        int mid=low+(high-low)/2;
        if(i<=mid){
            update(2*ind+1,low,mid,i,val);
        }
        else{
            update(2*ind+2,mid+1,high,i,val);
        }
        seg[ind]=min(seg[2*ind+1],seg[2*ind+2]);
    }
};


void solve(){
    int n;cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        int a;cin>>a;
        arr[i]=a;
    }
    
    SGTree sg(n);
    int q;cin>>q;
    
    sg.build(0,0,n-1,arr);
    
    while(q--){
        int l,r;cin>>l>>r;
        cout<<sg.query(0,0,n-1,l,r)<<endl;
    }
}
int main(){
    int test;
    test=1;
    //cin>>test;
    
    while(test--){
        solve();
    }
    return 0;
}
