class Node{
    Node* links[26];
    int endCount;
    int prefixCount;
    public:
        
    Node()
    {
        endCount = 0;
        prefixCount = 0;
    }
    
    bool containKey(char ch)
    {
        return (links[ch - 'a']!= NULL);
    }
    
    Node* get(char ch)
    {
      return links[ch-'a'];  
    }
    
    void put(Node* node, char ch)
    {
        links[ch - 'a'] = node;
    }
    
    void increasePrefix()
    {
        prefixCount++;
    }
    
    void increaseEnd()
    {
        endCount++;
    }
    
    int getPrefix()
    {
        return prefixCount;
    }
    
    int getEnd()
    {
        return endCount;
    }
    
    void reducePrefix()
    {
        prefixCount--;
    }
    
    void reduceEnd()
    {
        endCount--;
    }
};
class Trie{
    
    Node* root;

    public:

    Trie(){
      root = new Node();  
    }

    void insert(string &word){
        
        Node* curr = root;
        int n = word.length();
        
        for(int i=0; i<n; i++)
        {
            if(curr->get(word[i]) == nullptr)
            {
                curr->put(new Node(), word[i]);
            }
            curr = curr->get(word[i]);
            curr->increasePrefix();
        }
        curr->increaseEnd();
        
    }

    int countWordsEqualTo(string &word){
        
        Node* curr = root;
        int n = word.length();
        
        for(int i=0; i<n; i++)
        {
            if(curr->containKey(word[i]))
            {
                curr = curr->get(word[i]);
            }
            else
            {
                return 0;
            }
        }
        
        return curr->getEnd();
    }

    int countWordsStartingWith(string &word){
        
        Node* curr = root;
        int n = word.length();
        
        for(int i=0; i<n; i++)
        {
            if(curr->containKey(word[i]))
            {
                curr = curr->get(word[i]);
            }
            else
            {
                return 0;
            }
        }
        
        return curr->getPrefix();
    }

    void erase(string &word){
        
        Node * curr = root;
        for (int i = 0; i < word.length(); i++) 
        {
            if (curr->containKey(word[i])) 
            {
                curr = curr->get(word[i]);
                curr->reducePrefix();
            } else 
            {
                return;
            }
        }
        curr->reduceEnd();
    }
};

--------------------------------------------------------------------------------------------------------------------------------------------------------------


#include <bits/stdc++.h> 

struct Node{

    Node* links[26];
    int endCount;
    int prefixCount;

    bool containsKey(char ch){
        return links[ch-'a']!=nullptr;
    }

    void put(char ch,Node* node){
        links[ch-'a']=node;
    }

    Node* get(char ch){
        return links[ch-'a'];
    }

    void increaseEnd(){
        endCount++;
    }

    void reduceEnd(){
        endCount--;
    }

    int getEnd(){
        return endCount;
    }

    void increasePrefix(){
        prefixCount++;
    }

    void reducePrefix(){
        prefixCount--;
    }

    int getPrefix(){
        return prefixCount;
    }

};

class Trie{
    Node* root;
    public:

    Trie(){
        root=new Node();
        // Write your code here.
    }

    void insert(string &word){
        // Write your code here.
        int n=word.size();
        Node* curr=root;
        for(int i=0;i<n;i++){
            char c=word[i];

            if(curr->get(c)==nullptr){
                curr->put(c,new Node());
            }
            curr=curr->get(c);
            curr->increasePrefix();

        }
        curr->increaseEnd();
    }

    int countWordsEqualTo(string &word){
        // Write your code here.
        int n=word.size();
        Node* curr=root;
        for(int i=0;i<n;i++){
            if(curr->containsKey(word[i])){
                curr=curr->get(word[i]);
            }
            else{
                return 0;
            }
        }
        return curr->getEnd();
    }

    int countWordsStartingWith(string &word){
        // Write your code here.
        int n=word.size();
        Node* curr=root;
        for(int i=0;i<n;i++){
            if(curr->containsKey(word[i])==false){
                return 0;
            }
            curr=curr->get(word[i]);
        }
        return curr->getPrefix();
    }

    void erase(string &word){
        // Write your code here.
        int n=word.size();
        Node* curr=root;

        for(int i=0;i<n;i++){
            if(curr->containsKey(word[i])==false){
                return;
            }
            else{
                curr=curr->get(word[i]);
                curr->reducePrefix();
            }
        }
        curr->reduceEnd();
    }
};
